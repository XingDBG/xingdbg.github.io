<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>macOS 13 Ventura 修改hosts文件</title>
    <link href="/2022/11/19/macOS-13-Ventura-%E4%BF%AE%E6%94%B9hosts%E6%96%87%E4%BB%B6/"/>
    <url>/2022/11/19/macOS-13-Ventura-%E4%BF%AE%E6%94%B9hosts%E6%96%87%E4%BB%B6/</url>
    
    <content type="html"><![CDATA[<p> shell<br>M2芯片的笔记本升级macOS 13后发现无法修改hosts文件，过去直接<code>sudo vim /etc/hosts</code>就可以修改，升级之后修改了保存失败，禁用SIP或者进安全模式都没有作用。在升级macOS 13之前可以修改，而且intel芯片的笔记本升级了macOS 13修改也没问题，把我整郁闷了。最后问了一大顿终于找到了方法，其实很简单，只需要用<code>chflags</code>命令去掉文件的不可修改属性就可以了。  </p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">sudo chflags nouchg,noschg <span class="hljs-regexp">/etc/</span>hosts<br></code></pre></td></tr></table></figure><p>nouchg是去掉用户不可修改的属性，noschg是去掉系统不可修改的属性。去掉之后就可以正常修改了。改完建议执行<code>sudo chflags uchg,schg /etc/hosts</code>把属性改回来。</p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>ripgrep常用命令</title>
    <link href="/2022/10/13/ripgrep%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/"/>
    <url>/2022/10/13/ripgrep%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/</url>
    
    <content type="html"><![CDATA[<p>最普通的，使用正则表达式在当前目录下搜索：  </p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">rg &#x27;regex&#x27;<br></code></pre></td></tr></table></figure><p>关闭二进制检测，不跳过二进制文件，否则检测到文件中有0会跳过：  </p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">rg &#x27;regex&#x27; -a<br></code></pre></td></tr></table></figure><p>指定文件编码,比如UTF-8，UTF-16，GBK等：  </p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">rg &#x27;regex&#x27; -E UTF-8<br></code></pre></td></tr></table></figure><p>在压缩文件中搜索，遇到.zip、.tar.gz等压缩文件会在系统中寻找unzip、gzip等可执行文件解压后搜索：  </p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">rg &#x27;regex&#x27; -z<br></code></pre></td></tr></table></figure><p>关闭正则，直接搜索字符串：  </p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">rg &#x27;text&#x27; -F<br></code></pre></td></tr></table></figure><p>搜索bytes，比较麻烦，如果bytes中不包含任何在正则表达式中是特殊字符的值，可以直接用<code>\x</code>转义：  </p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">rg &#x27;\x12\x34&#x27; -a<br></code></pre></td></tr></table></figure><p>如果包含unicode字符，则需要在开头添加<code>(?-u)</code>禁止转义.如果包含<code>\x0A</code>(也就是\n换行)则需要添加<code>-U</code>允许换行。</p>]]></content>
    
    
    
    <tags>
      
      <tag>流水账</tag>
      
      <tag>ripgrep</tag>
      
      <tag>rg</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>CEF49在网页上播放USB摄像头并截图</title>
    <link href="/2020/07/17/CEF49%E5%9C%A8%E7%BD%91%E9%A1%B5%E4%B8%8A%E6%92%AD%E6%94%BEUSB%E6%91%84%E5%83%8F%E5%A4%B4%E5%B9%B6%E6%88%AA%E5%9B%BE/"/>
    <url>/2020/07/17/CEF49%E5%9C%A8%E7%BD%91%E9%A1%B5%E4%B8%8A%E6%92%AD%E6%94%BEUSB%E6%91%84%E5%83%8F%E5%A4%B4%E5%B9%B6%E6%88%AA%E5%9B%BE/</url>
    
    <content type="html"><![CDATA[<p>chromium 52才开始支持<code>navigator.mediaDevices.getUserMedia()</code>这个API，49也没有<code>navigator.getUserMedia()</code>这个接口，但是有个<code>navigator.webkitGetUserMedia()</code>，可以参考<a href="https://davidwalsh.name/browser-camera">这里</a>。<br>首先来枚举所有的音视频设备：  </p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs JavaScript">navigator.<span class="hljs-property">mediaDevices</span>.<span class="hljs-title function_">enumerateDevices</span>().<span class="hljs-title function_">then</span>(<span class="hljs-function"><span class="hljs-params">x</span>=&gt;</span>&#123;...&#125;)<br></code></pre></td></tr></table></figure><p>找到数组中kind是<code>videoinput</code>的deviceId然后用deviceId来获取一个stream：  </p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs JavaScript">navigator.<span class="hljs-title function_">webkitGetUserMedia</span>(&#123;<span class="hljs-attr">video</span>: deviceId&#125;, 成功回调, 失败回调);<br></code></pre></td></tr></table></figure><p>然后转换成一个url传递给video标签来播放:  </p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs JavaScript">video.<span class="hljs-property">src</span> = <span class="hljs-variable language_">window</span>.<span class="hljs-property">webkitURL</span>.<span class="hljs-title function_">createObjectURL</span>(stream);<br></code></pre></td></tr></table></figure><p>如果只有一个摄像头直接用 <code>navigator.webkitGetUserMedia(&#123;video: true&#125;, 成功回调, 失败回调);</code>也行，获取stream的时候也可以指定一些类似于宽高的属性，MDN都有。<br>截图到canvas弄成base64网上有代码就不写了。<br>期间遇到了点问题，比较低版本的cef不支持<code>--unsafely-treat-insecure-origin-as-secure</code>选项导致http链接不能用media device相关的接口，后面虽然有个pr修了但是我也懒得去照着pr改了直接把<code>SecurityPolicy::isOriginWhiteListedTrustworthy</code>改成了永远返回true，这样所有链接都会当成安全链接了（主要是懒得每次用cef都得开这个破选项还这么长）。<br>另外要用<code>navigator.webkitGetUserMedia()</code>还需要再cefclient的命令行上加上<code>--enable-media-stream</code>选项，这个破选项也是我对着代码理了一大顿才找到的，用老版本的东西真是坑爹。</p>]]></content>
    
    
    
    <tags>
      
      <tag>CEF</tag>
      
      <tag>webkitGetUserMedia</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>支持XP和NPAPI的CEF51</title>
    <link href="/2020/07/12/%E6%94%AF%E6%8C%81XP%E5%92%8CNPAPI%E7%9A%84CEF51/"/>
    <url>/2020/07/12/%E6%94%AF%E6%8C%81XP%E5%92%8CNPAPI%E7%9A%84CEF51/</url>
    
    <content type="html"><![CDATA[<p>主要特点: </p><ol><li>支持windows xp sp2</li><li>支持NPAPI,用的是CEF最后一个还支持NPAPI的提交</li><li>支持无边框窗体(–hide-frame), 支持使用CSS<code>-webkit-app-region: drag;</code>指定拖拽区域</li><li>给<code>CefDisplayHandler::OnConsoleMessage</code>增加了日志等级</li><li>html5test检测支持的特性数量为485个,包括MP3和H.264支持,比cef49多了几个</li></ol><p>其实cef49.2623用着也基本上足够了,只是有一些还是挺有用的特性只在比较新的cef版本里有,所以就自己做了点修改.<br>代码有点大,等有时间在传网盘或者弄个torrent.</p>]]></content>
    
    
    
    <tags>
      
      <tag>CEF</tag>
      
      <tag>XP</tag>
      
      <tag>NPAPI</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>搞了个支持XP的Electron v1.1.3</title>
    <link href="/2020/06/23/%E6%90%9E%E4%BA%86%E4%B8%AA%E6%94%AF%E6%8C%81XP%E7%9A%84Electron-v1-1-3/"/>
    <url>/2020/06/23/%E6%90%9E%E4%BA%86%E4%B8%AA%E6%94%AF%E6%8C%81XP%E7%9A%84Electron-v1-1-3/</url>
    
    <content type="html"><![CDATA[<p><img src="/images/Electron-v1-1-3.png"><br>注释掉了一些XP上没有的特性，DWM D3D11 蓝牙 MF和一些对话框API，然后用<a href="https://github.com/Chuyu-Team/YY-Thunks">YY-Thunks</a>打个补丁就可以运行了。<br>目前还没做完整的测试，不过那些注释掉的特性基本上都不太需要。<br>支持NPAPI还在折腾，现在虽然能加载NPAPI了，但是还有很多问题，有点头大。</p>]]></content>
    
    
    
    <tags>
      
      <tag>electron</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>加上了gitalk的评论系统</title>
    <link href="/2020/06/19/%E5%8A%A0%E4%B8%8A%E4%BA%86gitalk%E7%9A%84%E8%AF%84%E8%AE%BA%E7%B3%BB%E7%BB%9F/"/>
    <url>/2020/06/19/%E5%8A%A0%E4%B8%8A%E4%BA%86gitalk%E7%9A%84%E8%AF%84%E8%AE%BA%E7%B3%BB%E7%BB%9F/</url>
    
    <content type="html"><![CDATA[<p>给博客加上了评论，遇到了俩小坑，一个是OAuth App里的<code>Homepage URL</code>和<code>Authorization callback URL</code>两个url结尾要带上斜线；另一个是next主题的配置文件中<code>gitalk.repo</code>不是仓库的git路径，是仓库名。</p>]]></content>
    
    
    
    <tags>
      
      <tag>流水账</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>第一篇文章</title>
    <link href="/2020/06/19/%E7%AC%AC%E4%B8%80%E7%AF%87%E6%96%87%E7%AB%A0/"/>
    <url>/2020/06/19/%E7%AC%AC%E4%B8%80%E7%AF%87%E6%96%87%E7%AB%A0/</url>
    
    <content type="html"><![CDATA[<p>以前的域名到期了，重新申请了个，本来想用名字拼音.me来申请的，结果已经有人申请过了。  </p><p>新博客用的hexo，主题next。</p><p>老博客内容都丢了，前几天去archive.org上下载了个存档，不过还是很多图没了，有时间整理下也放上来。</p><p>长时间不写markdown，语法格式都有点记不起来了。</p><p>部署的时候遇到了个坑，hexo deploy的时候把我的CNAME文件给删了，结果导致访问 <a href="https://laoxing.me/">https://laoxing.me</a> 的时候404，找了半天才找到原因，重新搞个CNAME文件放到source文件夹下，内容是域名“laoxing.me”再重新发布下就好了。</p><p>然后github就500了。（其实两者并没有什么关系（逃</p>]]></content>
    
    
    
    <tags>
      
      <tag>流水账</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Test</title>
    <link href="/2020/06/19/Test/"/>
    <url>/2020/06/19/Test/</url>
    
    <content type="html"><![CDATA[<p>Test</p>]]></content>
    
    
    
    <tags>
      
      <tag>Test</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
